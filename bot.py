import os
import asyncio
import re
import logging
from functools import wraps

import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.types.callback_query import CallbackQuery
from datetime import datetime


logging.basicConfig(level=logging.DEBUG,
                    format="%(asctime)s - %(levelname)s - %(message)s")

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL",
                         "postgresql://myuser:mypassword@localhost:5432/mydb")

bot = Bot(token=TOKEN,
          default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


async def init_db():
    """–°—Ç–≤–æ—Ä—é—î –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å –¥–æ PostgreSQL."""
    db_pool = await asyncpg.create_pool(DATABASE_URL)
    dp["db_pool"] = db_pool
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞.")


async def is_curator(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ç–∞–±–ª–∏—Ü—ñ """
    db_pool = dp.get("db_pool")
    if not db_pool:
        raise Exception("–ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î")

    async with db_pool.acquire() as conn:
        curator_exists = await conn.fetchval(
            "SELECT 1 FROM curators WHERE user_id = $1", user_id
        )
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ curators,
        # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ True, —ñ–Ω–∞–∫—à–µ False
        return curator_exists is not None


def curator_only(handler):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫—É—Ä–∞—Ç–æ—Ä–æ–º."""
    @wraps(handler)
    async def wrapper(callback_query: CallbackQuery, *args, **kwargs):
        user_id = callback_query.from_user.id
        if not await is_curator(user_id):
            await callback_query.answer("‚ùå –í–∏ –Ω–µ —î –∫—É—Ä–∞—Ç–æ—Ä–æ–º —Ü—å–æ–≥–æ —á–∞—Ç—É!",
                                        show_alert=True)
            return
        return await handler(callback_query, *args, **kwargs)
    return wrapper


async def update_status(callback_query: CallbackQuery,
                        new_status: str,
                        action: str):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç—ñ —Ç–∞ –∑–∞–ø–∏—Å—É—î –≤ –ë–î."""
    db_pool = dp.get("db_pool")
    if not db_pool:
        await callback_query.answer("‚ö† –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î")
        return

    request_id = int(callback_query.data.split("_")[1])

    async with db_pool.acquire() as conn:
        curator_name_row = await conn.fetchrow(
            "SELECT username FROM curators WHERE user_id = $1",
            callback_query.from_user.id)

    curator_name = curator_name_row["username"]

    current_time = datetime.now().strftime('%H:%M:%S')

    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    old_text = callback_query.message.text or callback_query.message.caption
    new_text = re.sub(
        r"–°—Ç–∞—Ç—É—Å:.*",
        f"–°—Ç–∞—Ç—É—Å: {new_status}\n–ö—É—Ä–∞—Ç–æ—Ä: {curator_name}\n–í—Ä–µ–º—è: {current_time}",
        old_text,
        flags=re.DOTALL
    )

    # –†–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=new_text,
        reply_markup=callback_query.message.reply_markup
    )

    async with db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO curator_logs (request_id, curator_id, action, timestamp) VALUES ($1, $2, $3, NOW())",
            request_id, callback_query.from_user.id, action
        )

    await callback_query.answer(f"–í–∏ –∑–º—ñ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞: {new_status}")


@dp.message(Command("start"))
async def start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start."""
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç, —ñ —è —Å—Ç–≤–æ—Ä—é –≥—ñ–ª–∫—É –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è.")


@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ —Å—Ç–≤–æ—Ä—é—î –≥—ñ–ª–∫—É –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è."""
    if message.from_user.is_bot: # –©–æ–± –Ω–µ —Å–ª—É—Ö–∞–≤ —Å–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return

    if message.text is None:
        return

    if message.text.startswith("\u200b") or message.text.strip() == "":
        return

    db_pool = dp.get("db_pool")
    if not db_pool:
        return await message.answer("‚ö† –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î")


    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —è–∫—â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–æ—ó –≥—ñ–ª–∫–∏
    if message.message_thread_id is None:
        # –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–æ—ó –≥—ñ–ª–∫–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
        last_message = await db_pool.fetchval(
            "SELECT message FROM curator_messages WHERE sender_id=$1 ORDER BY timestamp DESC LIMIT 1",
            message.from_user.id
        )

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—ñ–ª–∫–∏
        forum_topic = await bot.create_forum_topic(
            chat_id=message.chat.id,
            name=f"–ó–∞–ø–∏—Ç –≤—ñ–¥ {message.from_user.full_name}"
        )

        text_forum = (
            f"<b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç!</b>\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {message.text}\n"
            f"<b>–ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S')}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> ‚è≥ –û—á—ñ–∫—É—î –æ–±—Ä–æ–±–∫–∏"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É",
                        callback_data=f"take_{forum_topic.message_thread_id}"),
                    InlineKeyboardButton(
                        text="‚è∏ –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è",
                        callback_data=f"hold_{forum_topic.message_thread_id}")
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞",
                        callback_data=f"reassign_{forum_topic.message_thread_id}"),
                    InlineKeyboardButton(
                        text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥",
                        callback_data=f"close_{forum_topic.message_thread_id}")
                ]
            ]
        )

        sent_message = await bot.send_message(
            chat_id=message.chat.id,
            message_thread_id=forum_topic.message_thread_id,
            text=text_forum,
            reply_markup=keyboard
        )

        # –ó–∞–ø–∏—Å —É –ë–î
        async with db_pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO curator_messages (request_id, sender_id, sender_role, message) VALUES ($1, $2, 'student', $3)",
                forum_topic.message_thread_id,
                message.from_user.id,
                message.text
            )

        await message.answer("‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º.")
    else:
        # –¢—É—Ç –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥—Ä—É–≥–æ—Ä—è–¥–Ω–∏—Ö –≥—ñ–ª–æ–∫

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –¥—Ä—É–≥–æ—Ä—è–¥–Ω–∏—Ö –≥—ñ–ª–æ–∫ —É –ë–î
        async with db_pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO curator_messages (request_id, sender_id, sender_role, message) VALUES ($1, $2, $3, $4)",
                message.message_thread_id,
                message.from_user.id,
                "curator" if await is_curator(message.from_user.id) else "student",
                message.text
            )


@dp.callback_query(lambda c: c.data.startswith("take_"))
@curator_only
async def take_request(callback_query: CallbackQuery):
    """–ö—É—Ä–∞—Ç–æ—Ä –±–µ—Ä–µ –∑–∞–ø–∏—Ç —É —Ä–æ–±–æ—Ç—É."""
    db_pool = dp.get("db_pool")
    if not db_pool:
        return await callback_query.answer(
            "‚ö† –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î"
        )

    request_id = int(callback_query.data.split("_")[1])
    curator_id = callback_query.from_user.id
    current_time = datetime.now()

    async with db_pool.acquire() as conn:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–≤ —É–∂–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –∫—É—Ä–∞—Ç–æ—Ä –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
        assigned_curator_id = await conn.fetchval(
            "SELECT curator_id FROM curator_logs WHERE request_id = $1 AND action = 'take' ORDER BY timestamp DESC LIMIT 1",
            request_id
        )

        if assigned_curator_id != curator_id and assigned_curator_id is not None:
            # –Ø–∫—â–æ –∫—É—Ä–∞—Ç–æ—Ä —É–∂–µ –±—É–≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ü–µ
            return await callback_query.answer(
                "‚ùå –¶–µ–π –∑–∞–ø–∏—Ç —É–∂–µ –≤–∑—è–≤ —É —Ä–æ–±–æ—Ç—É —ñ–Ω—à–∏–π –∫—É—Ä–∞—Ç–æ—Ä.",
                show_alert=True
            )

        created_at = await conn.fetchval(
            "SELECT timestamp FROM curator_messages WHERE request_id=$1 ORDER BY timestamp ASC LIMIT 1",
            request_id
        )

        response_time = (current_time - created_at).seconds if created_at else "N/A"

    await update_status(callback_query,
                        f"üü¢ –í —Ä–æ–±–æ—Ç—ñ\n‚è± –ß–∞—Å —Ä–µ–∞–∫—Ü—ñ—ó: {response_time} —Å–µ–∫.",
                        "take")


@dp.callback_query(lambda c: c.data.startswith("hold_"))
@curator_only
async def hold_request(callback_query: CallbackQuery):
    """–ö—É—Ä–∞—Ç–æ—Ä —Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è."""
    db_pool = dp.get("db_pool")
    if not db_pool:
        return await callback_query.answer(
            "‚ö† –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î"
        )

    request_id = int(callback_query.data.split("_")[1])
    curator_id = callback_query.from_user.id

    async with db_pool.acquire() as conn:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫—É—Ä–∞—Ç–æ—Ä–∞, —è–∫–∏–π –ø—Ä–∏–π–Ω—è–≤ –∑–∞–ø–∏—Ç
        assigned_curator_id = await conn.fetchval(
            """
            SELECT curator_id FROM curator_logs
            WHERE request_id = $1
            ORDER BY timestamp DESC LIMIT 1
            """,
            request_id
        )

    if curator_id != assigned_curator_id:
        return await callback_query.answer(
            "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—Ç—Ä–∏–º–∞—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ –ø—Ä–∏–π–Ω—è–≤ —ñ–Ω—à–∏–π –∫—É—Ä–∞—Ç–æ—Ä.",
            show_alert=True
        )

    await update_status(callback_query,
                        "üü° –£—Ç—Ä–∏–º–∞–Ω–æ",
                        "hold")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç—ñ (—è–∫—â–æ —É –Ω—å–æ–≥–æ –±—É–≤ –∑ –Ω–∏–º –¥—ñ–∞–ª–æ–≥)
    await bot.send_message(
        callback_query.from_user.id,
        "–ó–∞–ø–∏—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è, –æ—á—ñ–∫—É–π—Ç–µ –ø–æ–¥–∞–ª—å—à–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π."
    )


@dp.callback_query(lambda c: c.data.startswith("close_"))
@curator_only
async def close_request(callback_query: CallbackQuery):
    """–ö—É—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä–∏–≤–∞—î –∑–∞–ø–∏—Ç, —è–∫—â–æ –≤—ñ–Ω –π–æ–≥–æ –ø—Ä–∏–π–Ω—è–≤."""
    db_pool = dp.get("db_pool")
    if not db_pool:
        return await callback_query.answer(
            "‚ö† –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î")

    request_id = int(callback_query.data.split("_")[1])
    curator_id = callback_query.from_user.id

    async with db_pool.acquire() as conn:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫—É—Ä–∞—Ç–æ—Ä–∞, —è–∫–∏–π –ø—Ä–∏–π–Ω—è–≤ –∑–∞–ø–∏—Ç
        assigned_curator_id = await conn.fetchval(
            """
            SELECT curator_id FROM curator_logs
            WHERE request_id = $1
            ORDER BY timestamp DESC LIMIT 1
            """,
            request_id
        )

    if curator_id != assigned_curator_id:
        return await callback_query.answer(
            "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ –ø—Ä–∏–π–Ω—è–≤ —ñ–Ω—à–∏–π –∫—É—Ä–∞—Ç–æ—Ä.",
            show_alert=True
        )

    await update_status(callback_query,
                        "‚ùå –ó–∞–∫—Ä–∏—Ç–æ",
                        "close")

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≥—ñ–ª–∫—É —Ñ–æ—Ä—É–º—É
    try:
        await bot.close_forum_topic(
            chat_id=callback_query.message.chat.id,
            message_thread_id=request_id
        )
        await callback_query.answer("–ì—ñ–ª–∫—É –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ.")
    except Exception as e:
        await callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è –≥—ñ–ª–∫–∏.")
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è –≥—ñ–ª–∫–∏: {e}")

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –≥—ñ–ª–∫–∏
    await callback_query.message.answer(
        "–ì—ñ–ª–∫—É –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ –∫—É—Ä–∞—Ç–æ—Ä–æ–º."
    )


@dp.callback_query(
    lambda c: c.data.startswith("reassign_") and not c.data.startswith("reassign_to_")
)
@curator_only
async def reassign_request(callback_query: CallbackQuery):
    """–ö—É—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–∞—î –∑–∞–ø–∏—Ç –Ω–∞ —ñ–Ω—à–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞."""
    db_pool = dp.get("db_pool")
    if not db_pool:
        return await callback_query.answer(
            "‚ö† –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î")

    async with db_pool.acquire() as conn:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫—É—Ä–∞—Ç–æ—Ä–∞, —è–∫–∏–π –ø—Ä–∏–π–Ω—è–≤ –∑–∞–ø–∏—Ç
        assigned_curator_id = await conn.fetchval(
            """
            SELECT curator_id FROM curator_logs
            WHERE request_id = $1
            ORDER BY timestamp DESC LIMIT 1
            """,
            int(callback_query.data.split("_")[1])
        )

    if callback_query.from_user.id != assigned_curator_id:
        return await callback_query.answer(
            "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ –ø—Ä–∏–π–Ω—è–≤ —ñ–Ω—à–∏–π –∫—É—Ä–∞—Ç–æ—Ä.",
            show_alert=True
        )

    try:
        data_parts = callback_query.data.split("_")
        if len(data_parts) != 2:  # –¢—ñ–ª—å–∫–∏ –¥–≤–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è reassign_{request_id}
            return await callback_query.answer(
                "‚ö† –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö."
            )
        request_id = int(data_parts[1])
    except (IndexError, ValueError):
        return await callback_query.answer(
            "‚ö† –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö."
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∫—É—Ä–∞—Ç–æ—Ä—ñ–≤ —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ curators
    async with db_pool.acquire() as conn:
        curators = await conn.fetch("SELECT user_id, username FROM curators")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ username —è–∫ —Ç–µ–∫—Å—Ç
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=str(curator['username']),
                    callback_data=f"reassign_to_{curator['user_id']}_{request_id}"
                )
            ]
            for curator in curators
        ]
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –∫—É—Ä–∞—Ç–æ—Ä–∞
    await callback_query.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É:",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data.startswith("reassign_to_"))
@curator_only
async def handle_reassign(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ–±—Ä–∞–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞."""
    db_pool = dp.get("db_pool")
    if not db_pool:
        return await callback_query.answer(
            "‚ö† –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î")

    try:
        _, __, new_curator_id, request_id = callback_query.data.split("_")
        new_curator_id = int(new_curator_id)
        request_id = int(request_id)
    except (ValueError, IndexError):
        return await callback_query.answer(
            "‚ö† –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö."
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞
    async with db_pool.acquire() as conn:
        new_curator_row = await conn.fetchrow(
            "SELECT username FROM curators WHERE user_id = $1",
            new_curator_id)

    new_curator_name = new_curator_row['username']

    if not new_curator_name:
        return await callback_query.answer("‚ö† –ü–æ–º–∏–ª–∫–∞: –ö—É—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º
    text = (
        f"<b>–ó–∞–ø–∏—Ç –ø–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ!</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> üü¢ –í —Ä–æ–±–æ—Ç—ñ\n"
        f"<b>–ö—É—Ä–∞—Ç–æ—Ä:</b> {new_curator_name}\n"
        f"<b>–ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S')}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É",
                                     callback_data=f"take_{request_id}"),
                InlineKeyboardButton(text="‚è∏ –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è",
                                     callback_data=f"hold_{request_id}")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞",
                                     callback_data=f"reassign_{request_id}"),
                InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥",
                                     callback_data=f"close_{request_id}")
            ]
        ]
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    # –ü–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É
    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            UPDATE curator_logs
            SET curator_id = $1, timestamp = NOW()
            WHERE request_id = $2 AND action = 'take'
            """,
            new_curator_id, request_id
        )

    await callback_query.answer("‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ!")


async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
